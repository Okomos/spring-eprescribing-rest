openapi: 3.0.1
info:
  title: Spring eprescribing
  description: Spring eprescribing Sample Application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: '1.0'
servers:
  - url: http://localhost:9966/eprescribing/api
tags:
  - name: failing
    description: Endpoint which always returns an error.
  - name: owner
    description: Endpoints related to medication owners.
  - name: user
    description: Endpoints related to users.
  - name: medication
    description: Endpoints related to medications.
  - name: prescriber
    description: Endpoints related to prescribers.
  - name: prescription
    description: Endpoints related to prescriber prescriptions.
  - name: medicationtypes
    description: Endpoints related to medication types.
  - name: specialty
    description: Endpoints related to prescriber specialties.
paths:
  /oops:
    get:
      tags:
        - failing
      operationId: failingRequest
      summary: Always fails
      description: Produces sample error response.
      responses:
        200:
          description: Never returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /owners:
    post:
      tags:
        - owner
      operationId: addOwner
      summary: Adds a medication owner
      description: Records the details of a new medication owner.
      requestBody:
        description: The medication owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        required: true
      responses:
        201:
          description: The medication owner was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    get:
      tags:
        - owner
      operationId: listOwners
      summary: Lists medication owners
      description: Returns an array of medication owners.
      parameters:
        - name: lastName
          in: query
          description: Last name.
          required: false
          schema:
            type: string
            example: Davis
      responses:
        200:
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Owner'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /owners/{ownerId}:
    get:
      tags:
        - owner
      operationId: getOwner
      summary: Get a medication owner by ID
      description: Returns the medication owner or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - owner
      operationId: updateOwner
      summary: Update a medication owner's details
      description: Updates the medication owner record with the specified details.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The medication owner details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        required: true
      responses:
        200:
          description: Update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'

    delete:
      tags:
        - owner
      operationId: deleteOwner
      summary: Delete an owner by ID
      description: Returns the owner or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /owners/{ownerId}/medications:
    post:
      tags:
        - medication
      operationId: addMedicationToOwner
      summary: Adds a medication to an owner
      description: Records the details of a new medication.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The details of the new medication.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicationFields'
        required: true
      responses:
        201:
          description: The medication was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /owners/{ownerId}/medications/{medicationId}:
    get:
      tags:
        - medication
      operationId: getOwnersMedication
      summary: Get a medication by ID
      description: Returns the medication or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Medication details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - medication
      operationId: updateOwnersMedication

      summary: Update a medication's details
      description: Updates the medication record with the specified details.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The medication details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicationFields'
        required: true
      responses:
        204:
          description: Update successful.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found for this owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /owners/{ownerId}/medications/{medicationId}/prescriptions:
    post:
      tags:
        - prescription
      operationId: addPrescriptionToOwner
      summary: Adds a prescriber prescription
      description: Records the details of a new prescriber prescription.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the medication owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The details of the new prescriber prescription.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrescriptionFields'
        required: true
      responses:
        201:
          description: The prescriber prescription was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found for this owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /medicationtypes:
    get:
      tags:
        - medicationtypes
      operationId: listMedicationTypes
      summary: Lists medication types
      description: Returns an array of medication types.
      responses:
        200:
          description: Medication types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicationType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    post:
      tags:
        - medicationtypes
      operationId: addMedicationType
      summary: Create a medication type
      description: Creates a medication type .
      requestBody:
        description: The medication type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicationType'
        required: true
      responses:
        200:
          description: Medication type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicationType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /medicationtypes/{medicationTypeId}:
    get:
      tags:
        - medicationtypes
      operationId: getMedicationType
      summary: Get a medication type by ID
      description: Returns the medication type or a 404 error.
      parameters:
        - name: medicationTypeId
          in: path
          description: The ID of the medication type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Medication type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicationType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - medicationtypes
      operationId: updateMedicationType
      summary: Update a medication type by ID
      description: Returns the medication type or a 404 error.
      parameters:
        - name: medicationTypeId
          in: path
          description: The ID of the medication type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The medication type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicationType'
        required: true
      responses:
        200:
          description: Medication type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicationType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - medicationtypes
      operationId: deleteMedicationType
      summary: Delete a medication type by ID
      description: Returns the medication type or a 404 error.
      parameters:
        - name: medicationTypeId
          in: path
          description: The ID of the medication type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Medication type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicationType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'

  /medications:
    get:
      tags:
        - medication
      operationId: listMedications
      summary: Lists medication
      description: Returns an array of medication .
      responses:
        200:
          description: Medication types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    post:
      tags:
        - medication
      operationId: addMedication
      summary: Create a medication
      description: Creates a medication .
      requestBody:
        description: The medication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medication'
        required: true
      responses:
        200:
          description: Medication type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /medications/{medicationId}:
    get:
      tags:
        - medication
      operationId: getMedication
      summary: Get a medication by ID
      description: Returns the medication  or a 404 error.
      parameters:
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Medication details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - medication
      operationId: updateMedication
      summary: Update a medication by ID
      description: Returns the medication or a 404 error.
      parameters:
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The medication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medication'
        required: true
      responses:
        200:
          description: Medication details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - medication
      operationId: deleteMedication
      summary: Delete a medication by ID
      description: Returns the medication or a 404 error.
      parameters:
        - name: medicationId
          in: path
          description: The ID of the medication.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Medication details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medication'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Medication not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /prescriptions:
    get:
      tags:
        - prescription
      operationId: listPrescriptions
      summary: Lists prescriptions
      description: Returns an array of prescription .
      responses:
        200:
          description: prescriptions found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prescription'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    post:
      tags:
        - prescription
      operationId: addPrescription
      summary: Create a prescription
      description: Creates a prescription.
      requestBody:
        description: The prescription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescription'
        required: true
      responses:
        200:
          description: prescription created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /prescriptions/{prescriptionId}:
    get:
      tags:
        - prescription
      operationId: getPrescription
      summary: Get a prescription by ID
      description: Returns the prescription or a 404 error.
      parameters:
        - name: prescriptionId
          in: path
          description: The ID of the prescription.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Prescription details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - prescription
      operationId: updatePrescription
      summary: Update a prescription by ID
      description: Returns the prescription or a 404 error.
      parameters:
        - name: prescriptionId
          in: path
          description: The ID of the prescription.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The prescription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescription'
        required: true
      responses:
        200:
          description: Prescription details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - prescription
      operationId: deletePrescription
      summary: Delete a prescription by ID
      description: Returns the prescription or a 404 error.
      parameters:
        - name: prescriptionId
          in: path
          description: The ID of the prescription.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Prescription details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /specialties:
    get:
      tags:
        - specialty
      operationId: listSpecialties
      summary: Lists specialties
      description: Returns an array of specialty .
      responses:
        200:
          description: Specialties found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specialty'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    post:
      tags:
        - specialty
      operationId: addSpecialty
      summary: Create a specialty
      description: Creates a specialty .
      requestBody:
        description: The specialty
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
        required: true
      responses:
        200:
          description: Specialty created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Specialty not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /specialties/{specialtyId}:
    get:
      tags:
        - specialty
      operationId: getSpecialty
      summary: Get a specialty by ID
      description: Returns the specialty or a 404 error.
      parameters:
        - name: specialtyId
          in: path
          description: The ID of the speciality.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Specialty not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - specialty
      operationId: updateSpecialty
      summary: Update a specialty by ID
      description: Returns the specialty or a 404 error.
      parameters:
        - name: specialtyId
          in: path
          description: The ID of the specialty.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The medication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
        required: true
      responses:
        200:
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Specialty not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - specialty
      operationId: deleteSpecialty
      summary: Delete a specialty by ID
      description: Returns the specialty or a 404 error.
      parameters:
        - name: specialtyId
          in: path
          description: The ID of the specialty.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Specialty not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /prescribers:
    get:
      tags:
        - prescriber
      operationId: listPrescribers
      summary: Lists prescribers
      description: Returns an array of prescribers.
      responses:
        200:
          description: Prescribers found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prescriber'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'

    post:
      tags:
        - prescriber
      operationId: addPrescriber
      summary: Create a Prescriber
      description: Creates a prescriber .
      requestBody:
        description: The prescriber
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescriber'
        required: true
      responses:
        200:
          description: Prescriber created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescriber'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescriber not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /prescribers/{prescriberId}:
    get:
      tags:
        - prescriber
      operationId: getPrescriber
      summary: Get a prescriber by ID
      description: Returns the prescriber or a 404 error.
      parameters:
        - name: prescriberId
          in: path
          description: The ID of the prescriber.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Prescriber details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescriber'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescriber not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - prescriber
      operationId: updatePrescriber
      summary: Update a prescriber  by ID
      description: Returns the prescriber or a 404 error.
      parameters:
        - name: prescriberId
          in: path
          description: The ID of the prescriber.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The prescriber
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prescriber'
        required: true
      responses:
        200:
          description: Medication type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescriber'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescriber not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - prescriber
      operationId: deletePrescriber
      summary: Delete a prescriber by ID
      description: Returns the prescriber or a 404 error.
      parameters:
        - name: prescriberId
          in: path
          description: The ID of the prescriber.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Prescriber details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescriber'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Prescriber not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /users:
    post:
      tags:
        - user
      operationId: addUser
      summary: Create a user
      description: Creates a user.
      requestBody:
        description: The user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
components:
  schemas:
    RestError:
      title: REST Error
      description: The schema for all error responses.
      type: object
      properties:
        status:
          title: Status
          description: The HTTP status code.
          type: integer
          format: int32
          example: 400
          readOnly: true
        error:
          title: Error
          description: The short error message.
          type: string
          example: Bad Request
          readOnly: true
        path:
          title: Path
          description: The path of the URL for this request.
          type: string
          format: uri
          example: '/api/owners'
          readOnly: true
        timestamp:
          title: Timestamp
          description: The time the error occured.
          type: string
          format: date-time
          example: '2019-08-21T21:41:46.158+0000'
          readOnly: true
        message:
          title: Message
          description: The long error message.
          type: string
          example: 'Request failed schema validation'
          readOnly: true
        schemaValidationErrors:
          title: Schema validation errors
          description: Validation errors against the OpenAPI schema.
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
        trace:
          title: Trace
          description: The stacktrace for this error.
          type: string
          example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'
          readOnly: true
      required:
        - status
        - error
        - path
        - timestamp
        - message
        - schemaValidationErrors
    ValidationMessage:
      title: Validation message
      description: Messages describing a validation error.
      type: object
      properties:
        message:
          title: Message
          description: The valiation message.
          type: string
          example: "[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\"string\"])"
          readOnly: true
      required:
        - message
      additionalProperties: true
    Specialty:
      title: Specialty
      description: Fields of specialty of prescribers.
      type: object
      properties:
        id:
          title: ID
          description: The ID of the specialty.
          type: integer
          format: int32
          minimum: 0
          example: 1
          readOnly: true
        name:
          title: Name
          description: The name of the specialty.
          type: string
          maxLength: 80
          minLength: 1
          example: radiology
      required:
        - id
        - name
    OwnerFields:
      title: Owner fields
      description: Editable fields of a medication owner.
      type: object
      properties:
        firstName:
          title: First name
          description: The first name of the medication owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: George
        lastName:
          title: Last name
          description: The last name of the medication owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: Franklin
        address:
          title: Address
          description: The postal address of the medication owner.
          type: string
          minLength: 1
          maxLength: 255
          example: '110 W. Liberty St.'
        city:
          title: City
          description: The city of the medication owner.
          type: string
          minLength: 1
          maxLength: 80
          example: Madison
        telephone:
          title: Telephone number
          description: The telephone number of the medication owner.
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '6085551023'
      required:
        - firstName
        - lastName
        - address
        - city
        - telephone
    Owner:
      title: Owner
      description: A medication owner.
      allOf:
        - $ref: '#/components/schemas/OwnerFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the medication owner.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            medications:
              title: Medications
              description: The medications owned by this individual including any booked prescriber prescriptions.
              type: array
              items:
                $ref: '#/components/schemas/Medication'
              readOnly: true
          required:
            - medications
    MedicationFields:
      title: Medication fields
      description: Editable fields of a medication.
      type: object
      properties:
        name:
          title: Name
          description: The name of the medication.
          type: string
          maxLength: 30
          example: Leo
        expirationDate:
          title: Expiration date
          description: The date of expiration of the medication.
          type: string
          format: date
          example: '2010-09-07'
        type:
          $ref: '#/components/schemas/MedicationType'
      required:
        - name
        - expirationDate
        - type
    Medication:
      title: Medication
      description: A medication.
      allOf:
        - $ref: '#/components/schemas/MedicationFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the medication.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            ownerId:
              title: Owner ID
              description: The ID of the medication's owner.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            prescriptions:
              title: Prescriptions
              description: Prescriber prescription bookings for this medication.
              type: array
              items:
                $ref: '#/components/schemas/Prescription'
              readOnly: true
          required:
            - id
            - type
            - prescriptions
    PrescriberFields:
      title: PrescriberFields
      description: Editable fields of a prescribererinarian.
      type: object
      properties:
        firstName:
          title: First name
          description: The first name of the prescriber.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: 'James'
        lastName:
          title: Last name
          description: The last name of the prescriber.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: 'Carter'
        specialties:
          title: Specialties
          description: The specialties of the prescriber.
          type: array
          items:
            $ref: '#/components/schemas/Specialty'
      required:
        - firstName
        - lastName
        - specialties
    Prescriber:
      title: Prescriber
      description: A prescribererinarian.
      allOf:
        - $ref: '#/components/schemas/PrescriberFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the prescriber.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
      required:
        - id
        - firstName
        - lastName
        - specialties
    PrescriptionFields:
      title: Prescription fields
      description: Editable fields of a prescriber prescription.
      type: object
      properties:
        date:
          title: Date
          description: The date of the prescription.
          type: string
          format: date
          example: '2013-01-01'
        description:
          title: Description
          description: The description for the prescription.
          type: string
          minLength: 1
          maxLength: 255
          example: 'rabies shot'
      required:
        - description
    Prescription:
      title: Prescription
      description: A booking for a prescriber prescription.
      allOf:
        - $ref: '#/components/schemas/PrescriptionFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the prescription.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            medicationId:
              title: Medication ID
              description: The ID of the medication.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    MedicationTypeFields:
      title: MedicationType fields
      description: Editable fields of a medication type.
      type: object
      properties:
        name:
          title: Name
          description: The name of the medication type.
          type: string
          maxLength: 80
          minLength: 1
          example: cat
      required:
        - name
    MedicationType:
      title: Medication type
      description: A medication type.
      allOf:
        - $ref: '#/components/schemas/MedicationTypeFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the medication type.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    User:
      title: User
      description: An user.
      type: object
      properties:
        username:
          title: username
          description: The username
          type: string
          maxLength: 80
          minLength: 1
          example: john.doe
        password:
          title: Password
          description: The password
          type: string
          maxLength: 80
          minLength: 1
          example: 1234abc
        enabled:
          title: enabled
          description: Indicates if the user is enabled
          type: boolean
          example: true
        roles:
          title: Roles
          description: The roles of an user
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - username
    Role:
      title: Role
      description: A role.
      type: object
      properties:
        name:
          title: name
          description: The role's name
          type: string
          maxLength: 80
          minLength: 1
          example: admin
      required:
        - name
